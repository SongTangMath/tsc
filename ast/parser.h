#ifndef parser_h
#define parser_h

#include <string>
#include <vector>
#include <memory>
#include <set>

#define TSC_DEBUG
#define YYSTYPE ast_node

#define NODE_TYPE_PRIMARY_EXPRESSION 1
#define NODE_TYPE_PRIMARY_EXPRESSION_SUBTYPE_IDENTIFIER 1
#define NODE_TYPE_PRIMARY_EXPRESSION_SUBTYPE_CONSTANT 2
#define NODE_TYPE_PRIMARY_EXPRESSION_SUBTYPE_STRING 3
#define NODE_TYPE_PRIMARY_EXPRESSION_SUBTYPE_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS 4
#define NODE_TYPE_PRIMARY_EXPRESSION_SUBTYPE_GENERIC_SELECTION 5

#define NODE_TYPE_CONSTANT 2
#define NODE_TYPE_CONSTANT_SUBTYPE_ICONSTANT 1
#define NODE_TYPE_CONSTANT_SUBTYPE_FCONSTANT 2
#define NODE_TYPE_CONSTANT_SUBTYPE_ENUMERATION_CONSTANT 3

#define NODE_TYPE_ENUMERATION_CONSTANT 3
#define NODE_TYPE_ENUMERATION_CONSTANT_SUBTYPE_IDENTIFIER 1

#define NODE_TYPE_STRING 4
#define NODE_TYPE_STRING_SUBTYPE_STRING_LITERAL 1
#define NODE_TYPE_STRING_SUBTYPE_FUNC_NAME 2

#define NODE_TYPE_GENERIC_SELECTION 5
#define NODE_TYPE_GENERIC_SELECTION_SUBTYPE_GENERIC_LEFT_PARENTHESIS_ASSIGNMENT_EXPRESSION_COMMA_GENERIC_ASSOC_LIST_RIGHT_PARENTHESIS \
  1

#define NODE_TYPE_GENERIC_ASSOC_LIST 6
#define NODE_TYPE_GENERIC_ASSOC_LIST_SUBTYPE_GENERIC_ASSOCIATION 1
#define NODE_TYPE_GENERIC_ASSOC_LIST_SUBTYPE_GENERIC_ASSOC_LIST_COMMA_ASSOCIATION 2

#define NODE_TYPE_GENERIC_ASSOCIATION 7
#define NODE_TYPE_GENERIC_ASSOCIATION_SUBTYPE_TYPE_NAME_COLON_ASSIGNMENT_EXPRESSION 1
#define NODE_TYPE_GENERIC_ASSOCIATION_SUBTYPE_DEFAULT_COLON_ASSIGNMENT_EXPRESSION 2

#define NODE_TYPE_POSTFIX_EXPRESSION 8
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_PRIMARY_EXPRESSION 1
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_LEFT_BRACKET_EXPRESSION_RIGHT_BRACKET 2
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_LEFT_PARENTHESIS_RIGHT_PARENTHESIS 3
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_LEFT_PARENTHESIS_ARGUMENT_EXPRESSION_LIST_RIGHT_PARENTHESIS \
  4
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_DOT_IDENTIFIER 5
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_PTR_OP_IDENTIFIER 6
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_INC_OP 7
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION_DEC_OP 8
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS_LEFT_BRACE_INITIALIZER_LIST_RIGHT_BRACE \
  9
#define NODE_TYPE_POSTFIX_EXPRESSION_SUBTYPE_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS_LEFT_BRACE_INITIALIZER_LIST_COMMA_RIGHT_BRACE \
  10

#define NODE_TYPE_ARGUMENT_EXPRESSION_LIST 9
#define NODE_TYPE_ARGUMENT_EXPRESSION_LIST_SUBTYPE_ASSIGNMENT_EXPRESSION 1
#define NODE_TYPE_ARGUMENT_EXPRESSION_LIST_SUBTYPE_ARGUMENT_EXPRESSION_LIST_COMMA_ASSIGNMENT_EXPRESSION 2

#define NODE_TYPE_UNARY_EXPRESSION 10
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_POSTFIX_EXPRESSION 1
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_INC_OP_UNARY_EXPRESSION 2
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_DEC_OP_UNARY_EXPRESSION 3
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_UNARY_OPERATOR_CAST_EXPRESSION 4
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_SIZEOF_UNARY_EXPRESSION 5
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_SIZEOF_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS 6
#define NODE_TYPE_UNARY_EXPRESSION_SUBTYPE_ALIGNOF_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS 7

#define NODE_TYPE_UNARY_OPERATOR 11
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_BITAND 1
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_MUL 2
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_ADD 3
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_SUB 4
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_BITNOT 5
#define NODE_TYPE_UNARY_OPERATOR_SUBTYPE_OPERATOR_NOT 6

#define NODE_TYPE_CAST_EXPRESSION 12
#define NODE_TYPE_CAST_EXPRESSION_SUBTYPE_UNARY_EXPRESSION 1
#define NODE_TYPE_CAST_EXPRESSION_SUBTYPE_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS_CAST_EXPRESSION 2

#define NODE_TYPE_MULTIPLICATIVE_EXPRESSION 13
#define NODE_TYPE_MULTIPLICATIVE_EXPRESSION_SUBTYPE_CAST_EXPRESSION 1
#define NODE_TYPE_MULTIPLICATIVE_EXPRESSION_SUBTYPE_MULTIPLICATIVE_EXPRESSION_MUL_CAST_EXPRESSION 2
#define NODE_TYPE_MULTIPLICATIVE_EXPRESSION_SUBTYPE_MULTIPLICATIVE_EXPRESSION_DIV_CAST_EXPRESSION 3
#define NODE_TYPE_MULTIPLICATIVE_EXPRESSION_SUBTYPE_MULTIPLICATIVE_EXPRESSION_MOD_CAST_EXPRESSION 4

#define NODE_TYPE_ADDITIVE_EXPRESSION 14
#define NODE_TYPE_ADDITIVE_EXPRESSION_SUBTYPE_MULTIPLICATIVE_EXPRESSION 1
#define NODE_TYPE_ADDITIVE_EXPRESSION_SUBTYPE_ADDITIVE_EXPRESSION_ADD_MULTIPLICATIVE_EXPRESSION 2
#define NODE_TYPE_ADDITIVE_EXPRESSION_SUBTYPE_ADDITIVE_EXPRESSION_SUB_MULTIPLICATIVE_EXPRESSION 3

#define NODE_TYPE_SHIFT_EXPRESSION 15
#define NODE_TYPE_SHIFT_EXPRESSION_SUBTYPE_ADDITIVE_EXPRESSION 1
#define NODE_TYPE_SHIFT_EXPRESSION_SUBTYPE_SHIFT_EXPRESSION_LEFT_SHIFT_ADDITIVE_EXPRESSION 2
#define NODE_TYPE_SHIFT_EXPRESSION_SUBTYPE_SHIFT_EXPRESSION_RIGHT_SHIFT_ADDITIVE_EXPRESSION 3

#define NODE_TYPE_RELATIONAL_EXPRESSION 16
#define NODE_TYPE_RELATIONAL_EXPRESSION_SUBTYPE_SHIFT_EXPRESSION 1
#define NODE_TYPE_RELATIONAL_EXPRESSION_SUBTYPE_RELATIONAL_EXPRESSION_LESS_THAN_SHIFT_EXPRESSION 2
#define NODE_TYPE_RELATIONAL_EXPRESSION_SUBTYPE_RELATIONAL_EXPRESSION_GREATER_THAN_SHIFT_EXPRESSION 3
#define NODE_TYPE_RELATIONAL_EXPRESSION_SUBTYPE_RELATIONAL_EXPRESSION_LE_OP_SHIFT_EXPRESSION 4
#define NODE_TYPE_RELATIONAL_EXPRESSION_SUBTYPE_RELATIONAL_EXPRESSION_GE_OP_SHIFT_EXPRESSION 5

#define NODE_TYPE_EQUALITY_EXPRESSION 17
#define NODE_TYPE_EQUALITY_EXPRESSION_SUBTYPE_RELATIONAL_EXPRESSION 1
#define NODE_TYPE_EQUALITY_EXPRESSION_SUBTYPE_EQUALITY_EXPRESSION_EQ_OP_RELATIONAL_EXPRESSION 2
#define NODE_TYPE_EQUALITY_EXPRESSION_SUBTYPE_EQUALITY_EXPRESSION_NE_OP_RELATIONAL_EXPRESSION 3

#define NODE_TYPE_AND_EXPRESSION 18
#define NODE_TYPE_AND_EXPRESSION_SUBTYPE_EQUALITY_EXPRESSION 1
#define NODE_TYPE_AND_EXPRESSION_SUBTYPE_AND_EXPRESSION_BITAND_EQUALITY_EXPRESSION 2

#define NODE_TYPE_EXCLUSIVE_OR_EXPRESSION 19
#define NODE_TYPE_EXCLUSIVE_OR_EXPRESSION_SUBTYPE_AND_EXPRESSION 1
#define NODE_TYPE_EXCLUSIVE_OR_EXPRESSION_SUBTYPE_EXCLUSIVE_OR_EXPRESSION_BITXOR_AND_EXPRESSION 2

#define NODE_TYPE_INCLUSIVE_OR_EXPRESSION 20
#define NODE_TYPE_INCLUSIVE_OR_EXPRESSION_SUBTYPE_EXCLUSIVE_OR_EXPRESSION 1
#define NODE_TYPE_INCLUSIVE_OR_EXPRESSION_SUBTYPE_INCLUSIVE_OR_EXPRESSION_BITOR_EXCLUSIVE_OR_EXPRESSION 2

#define NODE_TYPE_LOGICAL_AND_EXPRESSION 21
#define NODE_TYPE_LOGICAL_AND_EXPRESSION_SUBTYPE_INCLUSIVE_OR_EXPRESSION 1
#define NODE_TYPE_LOGICAL_AND_EXPRESSION_SUBTYPE_LOGICAL_AND_EXPRESSION_AND_OP_INCLUSIVE_OR_EXPRESSION 2

#define NODE_TYPE_LOGICAL_OR_EXPRESSION 22
#define NODE_TYPE_LOGICAL_OR_EXPRESSION_SUBTYPE_LOGICAL_AND_EXPRESSION 1
#define NODE_TYPE_LOGICAL_OR_EXPRESSION_SUBTYPE_LOGICAL_OR_EXPRESSION_OR_OP_LOGICAL_AND_EXPRESSION 2

#define NODE_TYPE_CONDITIONAL_EXPRESSION 23
#define NODE_TYPE_CONDITIONAL_EXPRESSION_SUBTYPE_LOGICAL_OR_EXPRESSION 1
#define NODE_TYPE_CONDITIONAL_EXPRESSION_SUBTYPE_LOGICAL_OR_EXPRESSION_QUESTION_EXPRESSION_COLON_CONDITIONAL_EXPRESSION \
  2

#define NODE_TYPE_ASSIGNMENT_EXPRESSION 24
#define NODE_TYPE_ASSIGNMENT_EXPRESSION_SUBTYPE_CONDITIONAL_EXPRESSION 1
#define NODE_TYPE_ASSIGNMENT_EXPRESSION_SUBTYPE_UNARY_EXPRESSION_ASSIGNMENT_OPERATOR_ASSIGNMENT_EXPRESSION 2

#define NODE_TYPE_ASSIGNMENT_OPERATOR 25
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_ASSIGN 1
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_MUL_ASSIGN 2
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_DIV_ASSIGN 3
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_MOD_ASSIGN 4
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_ADD_ASSIGN 5
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_SUB_ASSIGN 6
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_LEFT_SHIFT_ASSIGN 7
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_RIGHT_SHIFT_ASSIGN 8
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_BITAND_ASSIGN 9
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_BITXOR_ASSIGN 10
#define NODE_TYPE_ASSIGNMENT_OPERATOR_SUBTYPE_BITOR_ASSIGN 11

#define NODE_TYPE_EXPRESSION 26
#define NODE_TYPE_EXPRESSION_SUBTYPE_ASSIGNMENT_EXPRESSION 1
#define NODE_TYPE_EXPRESSION_SUBTYPE_EXPRESSION_COMMA_ASSIGNMENT_EXPRESSION 2

#define NODE_TYPE_CONSTANT_EXPRESSION 27
#define NODE_TYPE_CONSTANT_EXPRESSION_SUBTYPE_CONDITIONAL_EXPRESSION 1

#define NODE_TYPE_DECLARATION 28
#define NODE_TYPE_DECLARATION_SUBTYPE_DECLARATION_SPECIFIERS_SEMI_COLON 1
#define NODE_TYPE_DECLARATION_SUBTYPE_DECLARATION_SPECIFIERS_INIT_DECLARATOR_LIST_SEMI_COLON 2
#define NODE_TYPE_DECLARATION_SUBTYPE_STATIC_ASSERT_DECLARATION 3

#define NODE_TYPE_DECLARATION_SPECIFIERS 29
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_STORAGE_CLASS_SPECIFIER_DECLARATION_SPECIFIERS 1
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_STORAGE_CLASS_SPECIFIER 2
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_TYPE_SPECIFIER_DECLARATION_SPECIFIERS 3
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_TYPE_SPECIFIER 4
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_TYPE_QUALIFIER_DECLARATION_SPECIFIERS 5
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_TYPE_QUALIFIER 6
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_FUNCTION_SPECIFIER_DECLARATION_SPECIFIERS 7
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_FUNCTION_SPECIFIER 8
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_ALIGNMENT_SPECIFIER_DECLARATION_SPECIFIERS 9
#define NODE_TYPE_DECLARATION_SPECIFIERS_SUBTYPE_ALIGNMENT_SPECIFIER 10

#define NODE_TYPE_INIT_DECLARATOR_LIST 30
#define NODE_TYPE_INIT_DECLARATOR_LIST_SUBTYPE_INIT_DECLARATOR 1
#define NODE_TYPE_INIT_DECLARATOR_LIST_SUBTYPE_INIT_DECLARATOR_LIST_INIT_DECLARATOR 2

#define NODE_TYPE_INIT_DECLARATOR 31
#define NODE_TYPE_INIT_DECLARATOR_SUBTYPE_DECLARATOR 1
#define NODE_TYPE_INIT_DECLARATOR_SUBTYPE_DECLARATOR_ASSIGN_INITIALIZER 2

#define NODE_TYPE_STORAGE_CLASS_SPECIFIER 32
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_TYPEDEF 1
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_EXTERN 2
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_STATIC 3
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_THREAD_LOCAL 4
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_AUTO 5
#define NODE_TYPE_STORAGE_CLASS_SPECIFIER_SUBTYPE_REGISTER 6

#define NODE_TYPE_TYPE_SPECIFIER 33
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_VOID 1
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_CHAR 2
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_SHORT 3
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_INT 4
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_LONG 5
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_FLOAT 6
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_DOUBLE 7
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_SIGNED 8
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_UNSIGNED 9
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_BOOL 10
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_COMPLEX 11
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_IMAGINARY 12
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_ATOMIC_TYPE_SPECIFIER 13
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_STRUCT_OR_UNION_SPECIFIER 14
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_ENUM_SPECIFIER 15
#define NODE_TYPE_TYPE_SPECIFIER_SUBTYPE_TYPEDEF_NAME 16

#define NODE_TYPE_STRUCT_OR_UNION_SPECIFIER 34
#define NODE_TYPE_STRUCT_OR_UNION_SPECIFIER_SUBTYPE_STRUCT_OR_UNION_LEFT_BRACE_STRUCT_DECLARATION_LIST_RIGHT_BRACE 1
#define NODE_TYPE_STRUCT_OR_UNION_SPECIFIER_SUBTYPE_STRUCT_OR_UNION_IDENTIFIER_LEFT_BRACE_STRUCT_DECLARATION_LIST_RIGHT_BRACE \
  2
#define NODE_TYPE_STRUCT_OR_UNION_SPECIFIER_SUBTYPE_IDENTIFIER 3

#define NODE_TYPE_STRUCT_OR_UNION 35
#define NODE_TYPE_STRUCT_OR_UNION_SUBTYPE_STRUCT 1
#define NODE_TYPE_STRUCT_OR_UNION_SUBTYPE_UNION 2

#define NODE_TYPE_STRUCT_DECLARATION_LIST 36
#define NODE_TYPE_STRUCT_DECLARATION_LIST_SUBTYPE_STRUCT_DECLARATION 1
#define NODE_TYPE_STRUCT_DECLARATION_LIST_SUBTYPE_STRUCT_DECLARATION_LIST_STRUCT_DECLARATION 2

#define NODE_TYPE_STRUCT_DECLARATION 37
#define NODE_TYPE_STRUCT_DECLARATION_SUBTYPE_SPECIFIER_QUALIFIER_LIST_SEMI_COLON 1
#define NODE_TYPE_STRUCT_DECLARATION_SUBTYPE_SPECIFIER_QUALIFIER_LIST_STRUT_DECLARATOR_LIST_SEMI_COLON 2
#define NODE_TYPE_STRUCT_DECLARATION_SUBTYPE_STATIC_ASSERT_DECLARATION 3

#define NODE_TYPE_SPECIFIER_QUALIFIER_LIST 38
#define NODE_TYPE_SPECIFIER_QUALIFIER_LIST_SUBTYPE_TYPE_SPECIFIER_SPECIFIER_QUALIFIER_LIST 1
#define NODE_TYPE_SPECIFIER_QUALIFIER_LIST_SUBTYPE_TYPE_SPECIFIER 2
#define NODE_TYPE_SPECIFIER_QUALIFIER_LIST_SUBTYPE_TYPE_QUALIFIER_TYPE_SPECIFIER_QUALIFIER_LIST 3
#define NODE_TYPE_SPECIFIER_QUALIFIER_LIST_SUBTYPE_TYPE_QUALIFIER 4

#define NODE_TYPE_STRUCT_DECLARATOR_LIST 39
#define NODE_TYPE_STRUCT_DECLARATOR_LIST_SUBTYPE_STRUCT_DECLARATOR 1
#define NODE_TYPE_STRUCT_DECLARATOR_LIST_SUBTYPE_STRUCT_DECLARATOR_LIST_COMMA_STRUCT_DECLARATOR 2

#define NODE_TYPE_STRUCT_DECLARATOR 40
#define NODE_TYPE_STRUCT_DECLARATOR_SUBTYPE_COLON_CONSTANT_EXPRESSION 1
#define NODE_TYPE_STRUCT_DECLARATOR_SUBTYPE_DECLARATOR_COLON_CONSTANT_EXPRESSION 2
#define NODE_TYPE_STRUCT_DECLARATOR_SUBTYPE_DECLARATOR 3

#define NODE_TYPE_ENUM_SPECIFIER 41
#define NODE_TYPE_ENUM_SPECIFIER_SUBTYPE_ENUM_LEFT_BRACE_ENUMATOR_LIST_RIGHT_BRACE 1
#define NODE_TYPE_ENUM_SPECIFIER_SUBTYPE_ENUM_LEFT_BRACE_ENUMATOR_LIST_COMMA_RIGHT_BRACE 2
#define NODE_TYPE_ENUM_SPECIFIER_SUBTYPE_ENUM_IDENTIFER_LEFT_BRACE_ENUMATOR_LIST_RIGHT_BRACE 3
#define NODE_TYPE_ENUM_SPECIFIER_SUBTYPE_ENUM_IDENTIFER_LEFT_BRACE_ENUMATOR_LIST_COMMA_RIGHT_BRACE 4
#define NODE_TYPE_ENUM_SPECIFIER_SUBTYPE_ENUM_IDENTIFER 5

#define NODE_TYPE_ENUMERATOR_LIST 42
#define NODE_TYPE_ENUMERATOR_LIST_SUBTYPE_ENUMERATOR 1
#define NODE_TYPE_ENUMERATOR_LIST_SUBTYPE_ENUMERATOR_LIST_COMMA_ENUMERATOR 2

#define NODE_TYPE_ENUMERATOR 43
#define NODE_TYPE_ENUMERATOR_SUBTYPE_ENUMERATION_CONSTANT_ASSIGN_CONSTANT_EXPRESSION 1
#define NODE_TYPE_ENUMERATOR_SUBTYPE_ENUMERATION_CONSTANT 2

#define NODE_TYPE_ATOMIC_TYPE_SPECIFIER 44
#define NODE_TYPE_ATOMIC_TYPE_SPECIFIER_SUBTYPE_ATOMIC_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS 1

#define NODE_TYPE_TYPE_QUALIFIER 45
#define NODE_TYPE_TYPE_QUALIFIER_SUBTYPE_CONST 1
#define NODE_TYPE_TYPE_QUALIFIER_SUBTYPE_RESTRICT 2
#define NODE_TYPE_TYPE_QUALIFIER_SUBTYPE_VOLATILE 3
#define NODE_TYPE_TYPE_QUALIFIER_SUBTYPE_ATOMIC 4

#define NODE_TYPE_FUNCTION_SPECIFIER 46
#define NODE_TYPE_FUNCTION_SPECIFIER_SUBTYPE_INLINE 1
#define NODE_TYPE_FUNCTION_SPECIFIER_SUBTYPE_NORETURN 2

#define NODE_TYPE_ALIGNMENT_SPECIFIER 47
#define NODE_TYPE_ALIGNMENT_SPECIFIER_SUBTYPE_LEFT_PARENTHESIS_CONSTANT_EXPRESSION_RIGHT_PARENTHESIS 1
#define NODE_TYPE_ALIGNMENT_SPECIFIER_SUBTYPE_ALIGNAS_LEFT_PARENTHESIS_TYPE_NAME_RIGHT_PARENTHESIS 2

#define NODE_TYPE_DECLARATOR 48
#define NODE_TYPE_DECLARATOR_SUBTYPE_POINTER_DIRECT_DECLARATOR 1
#define NODE_TYPE_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR 2

#define NODE_TYPE_DIRECT_DECLARATOR 49
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_IDENTIFIER 1
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_LEFT_PARENTHESIS_DECLARATOR_RIGHT_PARENTHESIS 2
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_RIGHT_BRACKET 3
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_MUL_RIGHT_BRACKET 4
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_STATIC_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  5
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET 6
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_MUL_RIGHT_BRACKET 7
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  8
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  9
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_RIGHT_BRACKET 10
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_BRACKET_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET 11
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_PARENTHESIS_PARAMETER_TYPE_LIST_RIGHT_PARENTHESIS 12
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_PARENTHESIS_RIGHT_PARENTHESIS 13
#define NODE_TYPE_DIRECT_DECLARATOR_SUBTYPE_DIRECT_DECLARATOR_LEFT_PARENTHESIS_IDENTIFIER_LIST_RIGHT_PARENTHESIS 14

#define NODE_TYPE_POINTER 50
#define NODE_TYPE_POINTER_SUBTYPE_MUL_TYPE_QUALIFIER_LIST_POINTER 1
#define NODE_TYPE_POINTER_SUBTYPE_MUL_TYPE_QUALIFIER_LIST 2
#define NODE_TYPE_POINTER_SUBTYPE_MUL_POINTER 3
#define NODE_TYPE_POINTER_SUBTYPE_MUL 4

#define NODE_TYPE_TYPE_QUALIFIER_LIST 51
#define NODE_TYPE_TYPE_QUALIFIER_LIST_SUBTYPE_TYPE_QUALIFIER_LIST_TYPE_QUALIFIER 1
#define NODE_TYPE_TYPE_QUALIFIER_LIST_SUBTYPE_TYPE_QUALIFIER 2

#define NODE_TYPE_PARAMETER_TYPE_LIST 52
#define NODE_TYPE_PARAMETER_TYPE_LIST_SUBTYPE_PARAMETER_LIST_COMMA_ELLIPSE 1
#define NODE_TYPE_PARAMETER_TYPE_LIST_SUBTYPE_PARAMETER_LIST 2

#define NODE_TYPE_PARAMETER_LIST 53
#define NODE_TYPE_PARAMETER_LIST_SUBTYPE_PARAMETER_LIST_COMMA_PARAMETER_DECLARATION 1
#define NODE_TYPE_PARAMETER_LIST_SUBTYPE_PARAMETER_DECLARATION 2

#define NODE_TYPE_PARAMETER_DECLARATION 54
#define NODE_TYPE_PARAMETER_DECLARATION_SUBTYPE_DECLARATION_SPECIFIERS_DECLARATOR 1
#define NODE_TYPE_PARAMETER_DECLARATION_SUBTYPE_DECLARATION_SPECIFIERS_ABSTRACT_DECLARATOR 2
#define NODE_TYPE_PARAMETER_DECLARATION_SUBTYPE_DECLARATION_SPECIFIERS 3

#define NODE_TYPE_IDENTIFIER_LIST 55
#define NODE_TYPE_IDENTIFIER_LIST_SUBTYPE_IDENTIFIER 1
#define NODE_TYPE_IDENTIFIER_LIST_SUBTYPE_IDENTIFIER_LIST_COMMA_IDENTIFIER 2

#define NODE_TYPE_TYPE_NAME 56
#define NODE_TYPE_TYPE_NAME_SUBTYPE_SPECIFIER_QUALIFIER_LIST_ABSTRACT_DECLARATOR 1
#define NODE_TYPE_TYPE_NAME_SUBTYPE_SPECIFIER_QUALIFIER_LIST 2

#define NODE_TYPE_ABSTRACT_DECLARATOR 57
#define NODE_TYPE_ABSTRACT_DECLARATOR_SUBTYPE_POINTER_DIRECT_ABSTRACT_DECLARATOR 1
#define NODE_TYPE_ABSTRACT_DECLARATOR_SUBTYPE_POINTER 2
#define NODE_TYPE_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR 3

#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR 58
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_PARENTHESIS_ABSTRACT_DECLARATOR_RIGHT_PARENTHESIS 1
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_RIGHT_BRACKET 2
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_MUL_RIGHT_BRACKET 3
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_STATIC_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  4
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET 5
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_TYPE_QUALIFIER_LIST_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  6
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  7
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_TYPE_QUALIFIER_LIST_RIGHT_BRACKET 8
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_BRACKET_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET 9
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_RIGHT_BRACKET 10
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_MUL_RIGHT_BRACKET 11
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_STATIC_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  12
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  13
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  14
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_STATIC_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  15
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_TYPE_QUALIFIER_LIST_RIGHT_BRACKET \
  16
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_BRACKET_ASSIGNMENT_EXPRESSION_RIGHT_BRACKET \
  17
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_PARENTHESIS_RIGHT_PARENTHESIS 18
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_LEFT_PARENTHESIS_PARAMETER_TYPE_LIST_RIGHT_PARENTHESIS 19
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_PARENTHESIS_RIGHT_PARENTHESIS 20
#define NODE_TYPE_DIRECT_ABSTRACT_DECLARATOR_SUBTYPE_DIRECT_ABSTRACT_DECLARATOR_LEFT_PARENTHESIS_PARAMETER_TYPE_LIST_RIGHT_PARENTHESIS \
  21

#define NODE_TYPE_INITIALIZER 59
#define NODE_TYPE_INITIALIZER_SUBTYPE_LEFT_BRACE_INITIALIZER__LIST_RIGHT_BRACE 1
#define NODE_TYPE_INITIALIZER_SUBTYPE_LEFT_BRACE_INITIALIZER__LIST_COMMA_RIGHT_BRACE 2
#define NODE_TYPE_INITIALIZER_SUBTYPE_ASSIGNMENT_EXPRESSION 3

#define NODE_TYPE_INITIALIZER_LIST 60
#define NODE_TYPE_INITIALIZER_LIST_SUBTYPE_DESIGNATION_INITIALIZER 1
#define NODE_TYPE_INITIALIZER_LIST_SUBTYPE_INITIALIZER 2
#define NODE_TYPE_INITIALIZER_LIST_SUBTYPE_INITIALIZER_LIST_COMMA_DESIGNATION_INITIALIZER 3
#define NODE_TYPE_INITIALIZER_LIST_SUBTYPE_INITIALIZER_LIST_COMMA_INITIALIZER 4

#define NODE_TYPE_DESIGNATION 61
#define NODE_TYPE_DESIGNATION_SUBTYPE_DESIGNATOR_LIST_ASSIGN 1

#define NODE_TYPE_DESIGNATOR_LIST 62
#define NODE_TYPE_DESIGNATOR_LIST_SUBTYPE_DESIGNATOR 1
#define NODE_TYPE_DESIGNATOR_LIST_SUBTYPE_DESIGNATOR_LIST_DESIGNATOR 2

#define NODE_TYPE_DESIGNATOR 63
#define NODE_TYPE_DESIGNATOR_SUBTYPE_LEFT_BRACKET_CONSTANT_EXPRESSION_RIGHT_BRACKET 1
#define NODE_TYPE_DESIGNATOR_SUBTYPE_DOT_IDENTIFIER 2

#define NODE_TYPE_STATIC_ASSERT_DECLARATION 64
#define NODE_TYPE_STATIC_ASSERT_DECLARATION_SUBTYPE_STATIC_ASSERT_LEFT_PARENTHESIS_CONSTANT_EXPRESSION_COMMA_STRING_LITERAL_RIGHT_PARENTHESIS_SEMI_COLON \
  1

#define NODE_TYPE_STATEMENT 65
#define NODE_TYPE_STATEMENT_SUBTYPE_LABELED_STATEMENT 1
#define NODE_TYPE_STATEMENT_SUBTYPE_COMPOUND_STATEMENT 2
#define NODE_TYPE_STATEMENT_SUBTYPE_EXPRESSION_STATEMENT 3
#define NODE_TYPE_STATEMENT_SUBTYPE_SELECTION_STATEMENT 4
#define NODE_TYPE_STATEMENT_SUBTYPE_ITERATION_STATEMENT 5
#define NODE_TYPE_STATEMENT_SUBTYPE_JUMP_STATEMENT 6

#define NODE_TYPE_LABELED_STATEMENT 66
#define NODE_TYPE_LABELED_STATEMENT_SUBTYPE_IDENTIFIER_COLON_STATEMENT 1
#define NODE_TYPE_LABELED_STATEMENT_SUBTYPE_CASE_CONSTANT_EXPRESSION_COLON_STATEMENT 2
#define NODE_TYPE_LABELED_STATEMENT_SUBTYPE_DEFAULT_COLON_STATEMENT 3

#define NODE_TYPE_COMPOUND_STATEMENT 67
#define NODE_TYPE_COMPOUND_STATEMENT_SUBTYPE_LEFT_BRACE_RIGHT_BRACE 1
#define NODE_TYPE_COMPOUND_STATEMENT_SUBTYPE_LEFT_BRACE_BLOCK_ITEM_LIST_RIGHT_BRACE 2

#define NODE_TYPE_BLOCK_ITEM_LIST 68
#define NODE_TYPE_BLOCK_ITEM_LIST_SUBTYPE_BLOCK_ITEM 1
#define NODE_TYPE_BLOCK_ITEM_LIST_SUBTYPE_BLOCK_ITEM_LIST_BLOCK_ITEM 2

#define NODE_TYPE_BLOCK_ITEM 68
#define NODE_TYPE_BLOCK_ITEM_SUBTYPE_DECLARATION 1
#define NODE_TYPE_BLOCK_ITEM_SUBTYPE_STATEMENT 2

#define NODE_TYPE_EXPRESSION_STATEMENT 69
#define NODE_TYPE_EXPRESSION_STATEMENT_SUBTYPE_SEMI_COLON 1
#define NODE_TYPE_EXPRESSION_STATEMENT_SUBTYPE_EXPRESSION_SEMI_COLON 2

#define NODE_TYPE_SELECTION_STATEMENT 70
#define NODE_TYPE_SELECTION_STATEMENT_SUBTYPE_IF_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS_STATEMENT_ELSE_STATEMENT \
  1
#define NODE_TYPE_SELECTION_STATEMENT_SUBTYPE_IF_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS_STATEMENT 2
#define NODE_TYPE_SELECTION_STATEMENT_SUBTYPE_SWITCH_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS_STATEMENT 3

#define NODE_TYPE_ITERATION_STATEMENT 71
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_WHILE_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS_EXPRESSION 1
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_DO_STATEMENT_WHILE_LEFT_PARENTHESIS_EXPRESSION_RIGHT_PARENTHESIS_SEMI_COLON \
  2
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_FOR_LEFT_PARENTHESIS_EXPRESSION_STATEMENT_EXPRESSION_STATEMENT_RIGHT_PARENTHESIS_STATEMENT \
  3
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_FOR_LEFT_PARENTHESIS_EXPRESSION_STATEMENT_EXPRESSION_STATEMENT_EXPRESSION_RIGHT_PARENTHESIS_STATEMENT \
  4
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_FOR_LEFT_PARENTHESIS_DECLARATION_EXPRESSION_STATEMENT_RIGHT_PARENTHESIS_STATEMENT \
  5
#define NODE_TYPE_ITERATION_STATEMENT_SUBTYPE_FOR_LEFT_PARENTHESIS_DECLARATION_EXPRESSION_STATEMENT_EXPRESSION_RIGHT_PARENTHESIS_STATEMENT \
  6

#define NODE_TYPE_JUMP_STATEMENT 72
#define NODE_TYPE_JUMP_STATEMENT_SUBTYPE_GOTO_IDENTIFIER_SEMI_COLON 1
#define NODE_TYPE_JUMP_STATEMENT_SUBTYPE_CONTINUE_SEMI_COLON 2
#define NODE_TYPE_JUMP_STATEMENT_SUBTYPE_BREAK_SEMI_COLON 3
#define NODE_TYPE_JUMP_STATEMENT_SUBTYPE_RETURN_SEMI_COLON 4
#define NODE_TYPE_JUMP_STATEMENT_SUBTYPE_RETURN_EXPRESSION_SEMI_COLON 5

#define NODE_TYPE_TRANSLATION_UNIT 73
#define NODE_TYPE_TRANSLATION_UNIT_SUBTYPE_EXTERNAL_DECLARATION 1
#define NODE_TYPE_TRANSLATION_UNIT_SUBTYPE_TRANSLATION_UNIT_EXTERNAL_DECLARATION 2

#define NODE_TYPE_EXTERNAL_DECLARATION 74
#define NODE_TYPE_EXTERNAL_DECLARATION_SUBTYPE_FUNCTION_DEFINITION 1
#define NODE_TYPE_EXTERNAL_DECLARATION_SUBTYPE_DECLARATION 2

#define NODE_TYPE_FUNCTION_DEFINITION 75
#define NODE_TYPE_FUNCTION_DEFINITION_SUBTYPE_DECLARATION_SPECIFIERS_DECLARATOR_DECLARATION_LIST_COMPOUND_STATEMENT 1
#define NODE_TYPE_FUNCTION_DEFINITION_SUBTYPE_DECLARATION_SPECIFIERS_DECLARATOR_COMPOUND_STATEMENT 2

#define NODE_TYPE_DECLARATION_LIST 76
#define NODE_TYPE_DECLARATION_LIST_SUBTYPE_DECLARATION 1
#define NODE_TYPE_DECLARATION_LIST_SUBTYPE_DECLARATION_LIST_DECLARATION 2

#define I_CONSTANT_SUBTYPE_HEX_DIGIT 1
#define I_CONSTANT_SUBTYPE_DECIMAL_DIGIT 2
#define I_CONSTANT_SUBTYPE_OCTAL_DIGIT 3
#define I_CONSTANT_SUBTYPE_CHAR_DIGIT 4

#define F_CONSTANT_SUBTYPE_INTEGER_SIGNIFICANT_PART 1
#define F_CONSTANT_SUBTYPE_FLOATING_SIGNIFICANT_PART 2
#define F_CONSTANT_SUBTYPE_INTEGER_DOT_SIGNIFICANT_PART 3
#define F_CONSTANT_SUBTYPE_HEX_INTEGER_SIGNIFICANT_PART 4
#define F_CONSTANT_SUBTYPE_HEX_FLOATING_SIGNIFICANT_PART 5
#define F_CONSTANT_SUBTYPE_HEX_INTEGER_DOT_SIGNIFICANT_PART 6

int yyparse(void);

struct expression_value {
    bool is_valid = true;
    std::shared_ptr<std::string> string_value;
    //if the expression node represent a constant expression it's value holds here
    union {
        char char_value;
        unsigned char unsigned_char_value;
        short short_value;
        unsigned short unsigned_short_value;
        int int_value;
        unsigned int unsigned_int_value;
        long long_value;
        unsigned long unsigned_long_value;
        long long long_long_value = 0;
        unsigned long long unsigned_long_long_value;
        float float_value;
        double double_value;
        long double long_double_value;
        size_t size_value;
    };
};

struct tsc_symbol;
struct tsc_function_signature;
struct symbol_table_node;
struct tsc_type {
    bool const_type_qualifier_set = false;
    bool restrict_type_qualifier_set = false;
    bool volatile_type_qualifier_set = false;

    std::shared_ptr<std::string> internal_name;
    // nullptr for primitive types and anonymous struct_union_enum
    std::shared_ptr<std::string> name;
    // for functions
    bool is_inline = false;
    bool is_noreturn = false;

    // for struct union enum
    bool is_complete = true; // struct A; -> incomplete
    int type_id = -1;
    int sub_type_id = -1;
    size_t type_size;
    //can be nullptr for incomplete array
    std::shared_ptr<int> array_length;
    //如果是指针则dereference后的type是underlying_type 数组同理
    std::shared_ptr<tsc_type> underlying_type;
    std::shared_ptr<tsc_function_signature> function_signature;
    //for struct_union fields
    std::vector<std::shared_ptr<tsc_symbol>> fields;
};
struct tsc_memory_location {
};
struct tsc_symbol {

    int symbol_type;
    bool is_typedef = false;
    bool is_extern = false;
    bool is_static = false;
    bool is_register = false;

    bool is_left_value = true;

    bool is_anonymous = false;
    bool is_bit_field = false;
    int bit_field_length;
    int offset;

    //can be nullptr for anonymous fields or temporary variables
    std::shared_ptr<std::string> identifier;
    //if this field is present, we can use & operator to get symbol's memory location
    std::shared_ptr<tsc_memory_location> memory_location;
    std::shared_ptr<tsc_type> type;
    std::shared_ptr<expression_value> value;

    int operator_id;
    std::vector<std::shared_ptr<tsc_symbol>> operands;
};

struct tsc_function_signature {
    // for K&R old style function declaration has_proto=false
    bool has_proto;
    // 是否有省略号(可变参数)
    bool has_ellipse;
    std::shared_ptr<tsc_type> return_type;
    std::vector<std::shared_ptr<tsc_symbol>> parameter_symbols;
    // for K&R style function definition
    std::vector<std::string> identifiers;

    std::shared_ptr<symbol_table_node> parameters_symbol_table_node;
    bool parameter_is_void;
};

struct global_types {
    static std::shared_ptr<tsc_type> primitive_type_void;
    static std::shared_ptr<tsc_type> primitive_type_char;
    static std::shared_ptr<tsc_type> primitive_type_unsigned_char;
    static std::shared_ptr<tsc_type> primitive_type_short;
    static std::shared_ptr<tsc_type> primitive_type_unsigned_short;
    static std::shared_ptr<tsc_type> primitive_type_int;
    static std::shared_ptr<tsc_type> primitive_type_unsigned_int;
    static std::shared_ptr<tsc_type> primitive_type_long;
    static std::shared_ptr<tsc_type> primitive_type_unsigned_long;
    static std::shared_ptr<tsc_type> primitive_type_long_long;
    static std::shared_ptr<tsc_type> primitive_type_unsigned_long_long;
    static std::shared_ptr<tsc_type> primitive_type_float;
    static std::shared_ptr<tsc_type> primitive_type_double;
    static std::shared_ptr<tsc_type> primitive_type_long_double;

    static std::shared_ptr<tsc_type> primitive_type_const_void;
    static std::shared_ptr<tsc_type> primitive_type_const_char;
    static std::shared_ptr<tsc_type> primitive_type_const_unsigned_char;
    static std::shared_ptr<tsc_type> primitive_type_const_short;
    static std::shared_ptr<tsc_type> primitive_type_const_unsigned_short;
    static std::shared_ptr<tsc_type> primitive_type_const_int;
    static std::shared_ptr<tsc_type> primitive_type_const_unsigned_int;
    static std::shared_ptr<tsc_type> primitive_type_const_long;
    static std::shared_ptr<tsc_type> primitive_type_const_unsigned_long;
    static std::shared_ptr<tsc_type> primitive_type_const_long_long;
    static std::shared_ptr<tsc_type> primitive_type_const_unsigned_long_long;
    static std::shared_ptr<tsc_type> primitive_type_const_float;
    static std::shared_ptr<tsc_type> primitive_type_const_double;
    static std::shared_ptr<tsc_type> primitive_type_const_long_double;
    //sizeof表达式的结果类型为size_t
    static std::shared_ptr<tsc_type> primitive_type_sizeof;
    static std::shared_ptr<tsc_type> primitive_type_ptrdiff_t;

};

std::shared_ptr<tsc_type> construct_pointer_to(std::shared_ptr<tsc_type> type);

std::shared_ptr<tsc_type> construct_array_of(std::shared_ptr<tsc_type> type);

struct tsc_switch_statement_context {
    std::set<int> case_constant_values;
};

struct tsc_statement_context {
    int statement_type;
    int statement_sub_type;
    std::shared_ptr<tsc_statement_context> parent_statement_context;
    std::shared_ptr<tsc_switch_statement_context> switch_statement_context;
};
//语法树节点

struct ast_node {
    int node_type;
    int node_sub_type;
    std::vector<std::shared_ptr<ast_node>> items;
    //保存terminal 否则为空
    std::shared_ptr<std::string> lexeme;
    // for I_CONST and F_CONST
    int lexeme_sub_type;
    //对于terminal是此token的行号
    int line_no;

    std::shared_ptr<tsc_symbol> symbol;

    // for top translation_unit it's all sub external_declarations
    // for top expression it's all sub assignment_expressions
    std::vector<std::shared_ptr<ast_node>> sub_nodes;

    //used when this node is initializer_list
    std::vector<std::vector<std::shared_ptr<ast_node>>> initializer_or_designation_initializers;
    //used when this node is initializer_list
    std::vector<std::shared_ptr<ast_node>> declarator_identifier_nodes;

    //used for statement nodes
    std::shared_ptr<tsc_statement_context> statement_context;

    std::string get_expression();

    int get_first_terminal_line_no();
};

extern std::shared_ptr<ast_node> translation_unit;
extern std::string input_file_name;

std::string extract_string(std::string input);

char escape_char(char ch);

bool is_unsigned_suffix(const std::string &suffix);

bool is_long_suffix(const std::string &suffix);

bool is_long_long_suffix(const std::string &suffix);

bool is_long_double_suffix(const std::string &suffix);

bool is_float_suffix(const std::string &suffix);

#endif